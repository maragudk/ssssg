// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/components/footer.html (14B)
// assets/layouts/default.html (296B)
// assets/pages/index.html (83B)
// assets/pages/index.yaml (106B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _componentsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\xb0\x7b\x34\x77\xc9\xfb\x1d\xfd\x36\xfa\x05\x76\x5c\x80\x00\x00\x00\xff\xff\xc4\x1f\xdd\x2a\x0e\x00\x00\x00")

func componentsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_componentsFooterHtml,
		"components/footer.html",
	)
}

func componentsFooterHtml() (*asset, error) {
	bytes, err := componentsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/footer.html", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1597391407, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xae, 0xc0, 0xc6, 0xd9, 0x67, 0x60, 0x9, 0xdd, 0x21, 0x4f, 0x40, 0x77, 0x87, 0xb5, 0xf0, 0xe0, 0xf1, 0xe6, 0x90, 0xfb, 0xb4, 0x55, 0x1e, 0x9, 0x71, 0x13, 0x81, 0x15, 0x23, 0x29, 0x7e}}
	return a, nil
}

var _layoutsDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x50\xb1\x4e\x03\x31\x0c\xdd\xfb\x15\x26\x33\x77\x27\x36\x06\xe7\x06\x28\x23\x82\xa1\x0b\xa3\x49\x0c\xb1\x94\x4b\xaa\x3b\xd3\xaa\x8a\xf2\xef\xe8\x1a\xaa\x56\x62\xb2\xdf\x7b\xf6\x7b\xb2\xf1\x6e\xfb\xf6\xbc\xfb\x78\x7f\x81\xa0\x53\x1c\x37\xb8\x16\x88\x94\xbe\xad\xe1\x64\xc6\x0d\x00\x06\x26\xbf\x36\x00\x38\xb1\x12\xb8\x40\xf3\xc2\x6a\xcd\x8f\x7e\x75\x8f\x06\x86\x5b\x31\xd1\xc4\xd6\x1c\x84\x8f\xfb\x3c\xab\x01\x97\x93\x72\x52\x6b\x8e\xe2\x35\x58\xcf\x07\x71\xdc\x9d\xc1\x3d\x48\x12\x15\x8a\xdd\xe2\x28\xb2\x7d\xb8\x5a\xa9\x68\xe4\xb1\x94\xfe\x95\x95\xfa\xdd\x8a\x6a\xc5\xa1\xd1\xff\xd2\x3c\x2f\x6e\x96\xbd\x4a\x4e\x37\x81\x97\xed\xed\x55\xad\xf5\x2f\x02\x87\xcb\x51\xf8\x99\xfd\xa9\x59\x96\xd2\x3f\x65\x7f\xaa\xf5\x3c\xd0\x78\x1c\xda\x5f\x7e\x03\x00\x00\xff\xff\x94\xa1\x4f\xda\x28\x01\x00\x00")

func layoutsDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsDefaultHtml,
		"layouts/default.html",
	)
}

func layoutsDefaultHtml() (*asset, error) {
	bytes, err := layoutsDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/default.html", size: 296, mode: os.FileMode(0644), modTime: time.Unix(1597389043, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x86, 0x3d, 0x2b, 0xeb, 0xbd, 0x5f, 0xb9, 0xb4, 0x3f, 0xe7, 0x9a, 0xbd, 0xc8, 0x24, 0xde, 0xab, 0xe8, 0x8c, 0x26, 0x2c, 0x0, 0xbc, 0x22, 0x8f, 0x10, 0x73, 0x16, 0xa8, 0x15, 0x62, 0x45}}
	return a, nil
}

var _pagesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\xf3\xad\x54\xc8\x4b\x2d\xd7\x51\x48\x4b\x4c\x2a\xcd\xc9\x2f\x2d\x56\x28\x4f\x4d\x2a\xce\x2c\x49\x55\xf8\x30\x7f\x46\x9f\x8d\x7e\x86\xa1\x1d\x97\x4d\x81\x5d\x78\x6a\x4e\x72\x7e\x6e\xaa\xa2\x8d\x7e\x81\x1d\x17\x57\x75\x75\x49\x6a\x6e\x41\x4e\x62\x49\xaa\x82\x52\x5a\x7e\x7e\x49\x6a\x91\x5e\x46\x49\x6e\x8e\x52\x6d\x2d\x17\x20\x00\x00\xff\xff\x3b\xb0\x43\x9c\x53\x00\x00\x00")

func pagesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesIndexHtml,
		"pages/index.html",
	)
}

func pagesIndexHtml() (*asset, error) {
	bytes, err := pagesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/index.html", size: 83, mode: os.FileMode(0644), modTime: time.Unix(1597389187, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xfd, 0x60, 0xab, 0x85, 0x41, 0x18, 0xa4, 0xf0, 0x19, 0xf1, 0xe8, 0x2e, 0x5f, 0x7b, 0x7, 0xd5, 0x3f, 0xd4, 0x4, 0xca, 0x1e, 0xb6, 0x64, 0x1, 0xb1, 0x5a, 0xe, 0xa6, 0xa9, 0xf8, 0xcc}}
	return a, nil
}

var _pagesIndexYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\xc2\x30\x0c\x05\xd0\x7b\xa6\xf8\x37\x2e\x15\x03\x64\x06\x18\xc2\x6d\x5c\xc9\xaa\xb1\xab\xc4\x56\x95\x25\x38\x73\x63\x45\x46\xe0\xbd\x38\xa8\x16\x20\x24\x94\x2b\x9e\x13\xc6\xd7\x82\x9d\xd6\x54\xcf\x81\x8b\xd7\x21\xc1\xf8\x7d\x3f\xef\x02\x34\x1e\x5b\x97\x33\xc4\xad\xe2\xe1\x7e\x80\xba\xa7\xb5\x05\xd3\xf3\xa6\x8a\x5d\xac\x41\x02\xe3\xa4\x7e\xe8\x04\x59\x83\xc9\xc6\xf7\xf2\x0f\x00\x00\xff\xff\x26\x6f\xda\xde\x6a\x00\x00\x00")

func pagesIndexYamlBytes() ([]byte, error) {
	return bindataRead(
		_pagesIndexYaml,
		"pages/index.yaml",
	)
}

func pagesIndexYaml() (*asset, error) {
	bytes, err := pagesIndexYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/index.yaml", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1597389159, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0xf2, 0xa3, 0xa5, 0x60, 0xb5, 0xd6, 0x66, 0x64, 0xb7, 0xa6, 0x41, 0x58, 0xf1, 0xb3, 0x3f, 0x80, 0xe, 0x1e, 0xc6, 0x3a, 0x34, 0xce, 0xb6, 0x4a, 0x9b, 0xb4, 0xa4, 0x7a, 0x6b, 0x19, 0xf4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"components/footer.html": componentsFooterHtml,
	"layouts/default.html":   layoutsDefaultHtml,
	"pages/index.html":       pagesIndexHtml,
	"pages/index.yaml":       pagesIndexYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"components": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{componentsFooterHtml, map[string]*bintree{}},
	}},
	"layouts": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{layoutsDefaultHtml, map[string]*bintree{}},
	}},
	"pages": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{pagesIndexHtml, map[string]*bintree{}},
		"index.yaml": &bintree{pagesIndexYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
