// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/components/opengraph.html (282B)
// assets/components/twittercard.html (177B)
// assets/layouts/default.html (422B)
// assets/pages/index.html (250B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _componentsOpengraphHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x41\x6e\x84\x30\x0c\x45\xf7\x9c\x22\xf2\x01\xc8\x1e\x95\xde\x25\x85\xdf\x10\x89\x38\x56\xb0\x9a\xa2\xc8\x77\x1f\x69\x66\xc3\x02\xd6\x7e\x7e\xef\xf7\xbe\xe2\x37\x31\x1c\x15\x01\xc7\x1a\x64\x23\xb3\xe1\x2b\x43\x83\x93\x5a\x04\x55\xcf\x99\x4a\x9c\x34\xe9\x0e\x72\x4b\x61\x05\xeb\x4c\xbd\x2b\xb2\xec\x41\xe1\xe8\x73\x33\x23\xff\x7d\xf7\xba\xe2\x58\x6a\x12\x4d\x85\x1f\x04\x57\xc2\x8c\xdc\xbd\x47\x4f\xb9\x2e\x68\xf8\x39\x92\xe2\x21\x9a\x72\x88\x57\x7a\x53\x95\x63\xf2\xbe\xb5\x36\xe2\x3f\x64\xd9\x31\x2e\x25\x7b\xa9\xf8\x4b\x68\xa3\x70\x7c\x77\x7b\x07\xaf\x66\xc3\x2b\x00\x00\xff\xff\x5a\xe3\x04\x48\x1a\x01\x00\x00")

func componentsOpengraphHtmlBytes() ([]byte, error) {
	return bindataRead(
		_componentsOpengraphHtml,
		"components/opengraph.html",
	)
}

func componentsOpengraphHtml() (*asset, error) {
	bytes, err := componentsOpengraphHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/opengraph.html", size: 282, mode: os.FileMode(0644), modTime: time.Unix(1600251146, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcf, 0xee, 0x93, 0xcc, 0x50, 0x2f, 0x48, 0xa, 0x5d, 0xd, 0xe5, 0x34, 0xa3, 0x2b, 0x60, 0xc8, 0xa3, 0xd7, 0xb5, 0x7b, 0xe1, 0xc4, 0xf5, 0xd7, 0xbf, 0xeb, 0x97, 0x81, 0x4f, 0xd9, 0xb0, 0x8f}}
	return a, nil
}

var _componentsTwittercardHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\x41\x0a\xc2\x30\x10\x85\xe1\x7d\x4e\x11\x72\x81\xee\xc5\x16\xaf\x32\x24\x4f\xc8\x22\x53\x98\x3e\x11\x19\xe6\xee\x82\x28\xb8\x48\xb7\xef\xff\x9e\x7b\xc3\xbd\x2b\x72\xe1\xb3\x93\xb0\x2a\xd6\x4a\x44\xba\x0e\x50\xb2\xca\xc0\xfa\x4b\x97\x4f\xcb\x75\x57\x42\xb9\x96\xe3\x31\x86\xd8\xab\x2c\xdb\x54\x1f\x9d\xf8\xd3\xb7\xef\x7e\xc6\xab\x41\xb8\xdb\xec\x91\x97\x2d\xb9\x43\x5b\x44\x7a\x07\x00\x00\xff\xff\xb8\xc9\x81\xaf\xb1\x00\x00\x00")

func componentsTwittercardHtmlBytes() ([]byte, error) {
	return bindataRead(
		_componentsTwittercardHtml,
		"components/twittercard.html",
	)
}

func componentsTwittercardHtml() (*asset, error) {
	bytes, err := componentsTwittercardHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/twittercard.html", size: 177, mode: os.FileMode(0644), modTime: time.Unix(1600251135, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8c, 0xff, 0x51, 0x32, 0xa5, 0xe9, 0xa1, 0xf, 0x72, 0x1c, 0xcd, 0x91, 0x48, 0x29, 0x9c, 0x3, 0x96, 0x89, 0x32, 0x93, 0xda, 0xb2, 0x8f, 0xa6, 0xff, 0xcf, 0x1, 0x28, 0x4b, 0x86, 0x2, 0xfd}}
	return a, nil
}

var _layoutsDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x8a\xe3\x66\x4a\xc4\xc6\x60\x77\x01\x66\x18\x58\x18\x0f\xfb\xda\x9c\xe4\xd8\x91\x73\x69\x54\x59\xfe\xef\xa8\x0d\xa5\x91\x32\xd9\x77\xef\xd3\x7b\xa7\x57\x8a\xe7\x83\x44\x06\x0c\x74\x4e\x93\x8e\xad\xe7\x03\x4d\x41\xb1\xd6\xc6\x3c\xbc\x7d\xbc\x7e\x7d\x7f\xbe\x43\xa7\x7d\xd8\x37\xe6\xf2\x40\xa0\x78\xb4\xc8\x11\xf7\x0d\x80\xe9\x98\xfc\xe5\x03\x60\x7a\x56\x02\xd7\x51\x1e\x59\x2d\x4e\x7a\xd8\xbd\x20\xb4\x6b\x31\x52\xcf\x16\x4f\xc2\xf3\x90\xb2\x22\xb8\x14\x95\xa3\x5a\x9c\xc5\x6b\x67\x3d\x9f\xc4\xf1\xee\x3a\x3c\x82\x44\x51\xa1\xb0\x1b\x1d\x05\xb6\xcf\x77\x2b\x15\x0d\xbc\x2f\x45\xb9\x1f\x02\x29\x03\x5e\x37\x58\xab\x69\x17\x6d\x13\xe9\x79\x74\x59\x06\x95\x14\x57\xa9\x6b\x8b\x35\x51\xeb\x7f\xd8\x1a\x49\x03\xc7\x63\xa6\xa1\x43\x78\xaa\x75\x23\xeb\x2c\xaa\x9c\x1d\x65\x7f\x03\x4c\x7b\xab\xc7\xfc\x24\x7f\xde\x5a\xfe\x9d\x72\xe7\x17\xcc\xb4\x4b\xe1\xa5\x70\xf4\xb5\x36\xbf\x01\x00\x00\xff\xff\x1f\x2e\x2b\xbf\xa6\x01\x00\x00")

func layoutsDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsDefaultHtml,
		"layouts/default.html",
	)
}

func layoutsDefaultHtml() (*asset, error) {
	bytes, err := layoutsDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/default.html", size: 422, mode: os.FileMode(0644), modTime: time.Unix(1600251102, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x18, 0x4e, 0x9, 0xc, 0xa, 0x96, 0x76, 0xaf, 0xfb, 0xb2, 0x43, 0x75, 0xd6, 0x5c, 0x23, 0xd0, 0x8c, 0xe8, 0x43, 0x7, 0xd1, 0xe7, 0x86, 0x5c, 0x2, 0xd4, 0xea, 0xc3, 0x8b, 0xb, 0x4d}}
	return a, nil
}

var _pagesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\x6d\x03\x31\x0c\x40\xd1\xfe\xa6\x60\xd4\xa4\x31\x7c\x70\x7f\xb8\x09\x92\x3a\xb5\x7c\xa2\x60\xc2\x34\x29\x9c\x28\x18\x82\xc0\x15\x52\xa7\xcb\x8a\x19\x21\x95\x81\xa4\xf1\x00\xff\xe1\x8f\x61\x78\x2b\x1c\x0d\x21\x70\xec\xda\xac\xce\x09\x73\x6c\x6c\x01\x8e\xee\xd3\x18\x09\x33\x09\x42\x30\x32\xc6\xe0\xfe\xde\x41\xf0\x7e\x80\x1c\xcf\x8d\xb5\x55\xb8\xe3\xb9\x92\x21\xfc\x7c\x7f\x7d\x8e\x81\x92\xfe\x65\x09\xeb\xb6\x53\x31\x52\x09\xee\x6f\xaa\x57\x88\xbb\x36\x49\x07\xe8\xda\x5e\x99\x21\x93\x24\x20\x83\x5a\xe2\x7e\xe5\x0e\x51\x12\x08\x6d\x78\x7c\x60\x7f\xb4\x4d\xc5\x50\x2c\xb8\x4f\xcb\xe5\xb4\x3e\x7d\x59\xe6\xcb\x69\x9d\x96\xb2\x7e\x20\x6f\x7a\xc3\x97\x65\x2e\xeb\xf4\x40\x7f\x03\x00\x00\xff\xff\x97\xd9\x42\xda\xfa\x00\x00\x00")

func pagesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesIndexHtml,
		"pages/index.html",
	)
}

func pagesIndexHtml() (*asset, error) {
	bytes, err := pagesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/index.html", size: 250, mode: os.FileMode(0644), modTime: time.Unix(1600251024, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0xbd, 0xe0, 0x76, 0xb2, 0x6a, 0xf6, 0x3f, 0xe7, 0x38, 0x48, 0xf4, 0x92, 0x76, 0x49, 0x71, 0xf8, 0xf8, 0x7, 0x8, 0x19, 0x7d, 0x61, 0x6d, 0xf4, 0x52, 0xbd, 0xb0, 0x7c, 0x1f, 0x7f, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"components/opengraph.html":   componentsOpengraphHtml,
	"components/twittercard.html": componentsTwittercardHtml,
	"layouts/default.html":        layoutsDefaultHtml,
	"pages/index.html":            pagesIndexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"components": &bintree{nil, map[string]*bintree{
		"opengraph.html":   &bintree{componentsOpengraphHtml, map[string]*bintree{}},
		"twittercard.html": &bintree{componentsTwittercardHtml, map[string]*bintree{}},
	}},
	"layouts": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{layoutsDefaultHtml, map[string]*bintree{}},
	}},
	"pages": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{pagesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
