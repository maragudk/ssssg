// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/components/footer.html (42B)
// assets/layouts/default.html (358B)
// assets/pages/index.html (276B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _componentsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\xb2\x29\xb0\x7b\x34\x77\xc9\xfb\x1d\xfd\x36\xfa\x05\x76\x5c\xd5\xd5\xa9\x79\x29\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x40\x51\x3b\x2c\x2a\x00\x00\x00")

func componentsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_componentsFooterHtml,
		"components/footer.html",
	)
}

func componentsFooterHtml() (*asset, error) {
	bytes, err := componentsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/footer.html", size: 42, mode: os.FileMode(0644), modTime: time.Unix(1598365645, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0xe0, 0xf2, 0x47, 0xfe, 0x19, 0x8a, 0x88, 0x28, 0xc6, 0x38, 0x23, 0xd9, 0xc4, 0xa2, 0x7d, 0xfc, 0x53, 0x30, 0x6e, 0x75, 0x4, 0xb, 0xb6, 0x5a, 0x5f, 0x71, 0x58, 0xf, 0xd8, 0xc4, 0xfb}}
	return a, nil
}

var _layoutsDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x31\x4f\xc4\x30\x0c\x85\xf7\xfe\x0a\xe3\x99\x52\xb1\x31\x24\x5d\x80\x19\x06\x16\x46\xd3\xb8\xd4\x52\x9a\x56\xad\x7b\xa7\x53\xe4\xff\x8e\xae\x3d\x44\x24\xa6\xc4\x7e\xcf\xdf\x93\x9d\x73\xe0\x5e\x12\x03\x46\xba\x4c\x9b\xae\x4d\xe0\x9e\xb6\xa8\x68\x56\xb9\xbb\x97\xb7\xe7\x8f\xcf\xf7\x57\x18\x74\x8c\x6d\xe5\xae\x0f\x44\x4a\xdf\x1e\x39\x61\x5b\x01\xb8\x81\x29\x5c\x3f\x00\x6e\x64\x25\xe8\x06\x5a\x56\x56\x8f\x9b\xf6\xf5\x13\x42\x53\x8a\x89\x46\xf6\x78\x12\x3e\xcf\xd3\xa2\x08\xdd\x94\x94\x93\x7a\x3c\x4b\xd0\xc1\x07\x3e\x49\xc7\xf5\x5e\xdc\x83\x24\x51\xa1\x58\xaf\x1d\x45\xf6\x8f\x7f\x28\x15\x8d\xdc\xe6\xac\x3c\xce\x91\x94\x01\xf7\x0e\x9a\xb9\xe6\xd0\xfe\x45\x06\x5e\xbb\x45\x66\x95\x29\x15\xa9\x25\xa2\x74\x98\xdd\xc2\x5c\xf3\xbb\x9e\xfb\x9a\xc2\xe5\xe0\x96\x53\x37\x14\xc2\x83\xd9\xee\x3f\x6c\xae\x39\x0e\x96\x33\xa7\x60\x56\xfd\x04\x00\x00\xff\xff\x8d\x4b\x83\x1d\x66\x01\x00\x00")

func layoutsDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsDefaultHtml,
		"layouts/default.html",
	)
}

func layoutsDefaultHtml() (*asset, error) {
	bytes, err := layoutsDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/default.html", size: 358, mode: os.FileMode(0644), modTime: time.Unix(1599376253, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x7a, 0xe5, 0xe3, 0xfc, 0xe3, 0x7b, 0x51, 0x14, 0xe8, 0x4, 0xfb, 0x23, 0x87, 0x61, 0x26, 0x8f, 0xb7, 0x4c, 0x51, 0x7, 0xb, 0x16, 0xd, 0xd9, 0xa2, 0xc0, 0x52, 0xd5, 0xc0, 0x81, 0x2b}}
	return a, nil
}

var _pagesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x31\x6e\xc3\x30\x0c\x85\xe1\xdd\xa7\x60\xb5\x74\x09\x62\x64\x37\x7c\x82\x76\xee\xac\x58\x14\x42\x84\x21\x05\x8b\x42\x60\x08\xbc\x42\xe7\x6e\xbd\x62\x8f\x50\x14\x45\x50\x4f\x3d\x00\x3f\xbe\xbf\x77\xc3\x5b\xe1\x68\x08\x81\xe3\xa6\xcd\xea\x98\x30\xc7\xc6\x16\xe0\xe8\x3e\x0c\xbd\x27\xcc\x24\x08\xc1\xc8\x18\x83\xfb\xeb\x06\x82\xf7\x03\xe4\x78\x6e\xac\xad\xc2\x1d\xcf\x95\x0c\xe1\xeb\xf3\xe3\xbd\x77\x94\xe4\xbe\x3b\x4b\x58\x97\x95\x8a\x91\x4a\x70\x7f\x51\xbd\x42\x5c\xb5\x49\x3a\xc0\xa6\xed\x99\x19\x32\x49\x02\x32\xa8\x25\xae\x57\xde\x20\x4a\x02\xa1\x05\x8f\x0f\x6c\xa7\x2d\x2a\x86\x62\xc1\x7d\x98\x2e\xa7\xf9\xdf\x2d\xd3\x78\x39\xcd\xc3\x54\xe6\x37\xe4\x45\x6f\xf8\x34\x8d\x65\xfe\xc1\xfe\x9a\xb3\xaa\xe1\xfa\x9b\xfa\xf8\xf6\x1d\x00\x00\xff\xff\x14\x06\x44\xb7\x14\x01\x00\x00")

func pagesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesIndexHtml,
		"pages/index.html",
	)
}

func pagesIndexHtml() (*asset, error) {
	bytes, err := pagesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/index.html", size: 276, mode: os.FileMode(0644), modTime: time.Unix(1599376205, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xfd, 0x5c, 0x3e, 0x85, 0x3b, 0xb0, 0xe8, 0xc7, 0xe9, 0xd3, 0xdf, 0x8a, 0x92, 0xed, 0x3c, 0x11, 0x84, 0x40, 0x44, 0x97, 0xd8, 0x3e, 0x52, 0x83, 0xef, 0x13, 0xaa, 0x7a, 0x45, 0x1f, 0xcb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"components/footer.html": componentsFooterHtml,
	"layouts/default.html":   layoutsDefaultHtml,
	"pages/index.html":       pagesIndexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"components": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{componentsFooterHtml, map[string]*bintree{}},
	}},
	"layouts": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{layoutsDefaultHtml, map[string]*bintree{}},
	}},
	"pages": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{pagesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
