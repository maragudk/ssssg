// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/components/footer.html (14B)
// assets/layouts/default.html (356B)
// assets/pages/index.html (272B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _componentsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x29\xb0\x7b\x34\x77\xc9\xfb\x1d\xfd\x36\xfa\x05\x76\x5c\x80\x00\x00\x00\xff\xff\xc4\x1f\xdd\x2a\x0e\x00\x00\x00")

func componentsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_componentsFooterHtml,
		"components/footer.html",
	)
}

func componentsFooterHtml() (*asset, error) {
	bytes, err := componentsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "components/footer.html", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1597391851, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0xae, 0xc0, 0xc6, 0xd9, 0x67, 0x60, 0x9, 0xdd, 0x21, 0x4f, 0x40, 0x77, 0x87, 0xb5, 0xf0, 0xe0, 0xf1, 0xe6, 0x90, 0xfb, 0xb4, 0x55, 0x1e, 0x9, 0x71, 0x13, 0x81, 0x15, 0x23, 0x29, 0x7e}}
	return a, nil
}

var _layoutsDefaultHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7e\x0a\xe3\x99\xaa\x62\x63\x48\xba\x00\x33\x0c\x2c\x8c\x26\x71\xa9\xa5\x34\xa9\x5a\xf7\x4e\xa7\x28\xdf\x1d\xf5\x7a\x88\x48\x37\xe5\xcf\x7b\xfe\x3d\xf9\xe5\xec\x79\x90\xc8\x80\x81\x2e\x69\xd3\xb5\xf3\x3c\xd0\x16\x14\x4b\x69\xcc\xc3\xeb\xfb\xcb\xe7\xd7\xc7\x1b\x8c\x3a\x85\xbe\x31\xfb\x01\x81\xe2\x8f\x45\x8e\xd8\x37\x00\x66\x64\xf2\xfb\x05\xc0\x4c\xac\x04\x6e\xa4\x65\x65\xb5\xb8\xe9\xd0\x3e\x23\x74\xb5\x18\x69\x62\x8b\x27\xe1\xf3\x9c\x16\x45\x70\x29\x2a\x47\xb5\x78\x16\xaf\xa3\xf5\x7c\x12\xc7\xed\xf5\xf1\x08\x12\x45\x85\x42\xbb\x3a\x0a\x6c\x9f\xfe\x51\x2a\x1a\xb8\xcf\x59\x79\x9a\x03\x29\x03\x5e\x7f\xb0\x14\xd3\x1d\xda\x5d\xa4\xe7\xd5\x2d\x32\xab\xa4\x58\xa5\xd6\x88\xda\x51\xca\x2d\xcc\x74\x7f\xeb\x99\xef\xe4\x2f\x07\xb7\x9e\xba\xa1\xf6\xb2\x76\xf7\x61\x32\xdd\x51\x57\xce\x1c\x7d\x29\xcd\x6f\x00\x00\x00\xff\xff\xcf\x38\x1a\x27\x64\x01\x00\x00")

func layoutsDefaultHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsDefaultHtml,
		"layouts/default.html",
	)
}

func layoutsDefaultHtml() (*asset, error) {
	bytes, err := layoutsDefaultHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/default.html", size: 356, mode: os.FileMode(0644), modTime: time.Unix(1598365301, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0xb, 0x90, 0x90, 0x56, 0x29, 0x3c, 0xac, 0xa2, 0x2e, 0x1b, 0x82, 0x6a, 0x6a, 0x8e, 0x9a, 0x5f, 0xb1, 0xde, 0x74, 0xcc, 0x50, 0x88, 0xf7, 0xeb, 0xab, 0x93, 0x45, 0xcb, 0xbe, 0xb, 0xfa}}
	return a, nil
}

var _pagesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x31\x4e\x03\x31\x10\x85\xe1\x7e\x4f\x31\xb8\xa1\x89\x58\xa5\x5f\xed\x09\xa0\xa6\x76\xd6\xcf\x8a\x95\xc9\x8c\xb5\x1e\x2b\x5a\x59\xbe\x02\x35\x1d\x57\xe4\x08\x88\x20\xc4\x56\x1c\x60\xfe\xf9\x5e\x6b\x86\x6b\x66\x6f\x20\xc7\x7e\xd3\x6a\x65\x0c\x88\xbe\xb2\xb9\xde\x87\xa1\xb5\x80\x98\x04\xe4\x2c\x19\xc3\xf5\xfe\xb2\x91\xe0\x76\xa0\xe8\x4f\x95\xb5\x16\xba\xe1\x54\x92\x81\x3e\x3f\xde\xdf\x5a\x83\x84\xde\x77\x67\x01\x65\x59\x53\xb6\xa4\xe2\x7a\x7f\x56\xbd\x90\x5f\xb5\x4a\x38\xd0\xa6\xf5\x91\x99\x62\x92\x40\xc9\xa8\x64\xbf\x5e\x78\x23\x2f\x81\x24\x2d\x78\xfa\x8d\xed\x6a\x8b\x8a\x41\xee\xb4\xe9\x7c\x9c\xff\xb5\x4c\xe3\xf9\x38\x0f\x53\x9e\x5f\xc1\x8b\x5e\xf1\x30\x8d\x79\xfe\x8e\xfd\x2d\x8e\xaa\x86\xd5\xdd\xc1\x3f\xbf\xbe\x02\x00\x00\xff\xff\xb9\xe1\x99\xa6\x10\x01\x00\x00")

func pagesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesIndexHtml,
		"pages/index.html",
	)
}

func pagesIndexHtml() (*asset, error) {
	bytes, err := pagesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/index.html", size: 272, mode: os.FileMode(0644), modTime: time.Unix(1598365247, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x8f, 0x49, 0x52, 0x96, 0x95, 0x57, 0x8f, 0x87, 0x96, 0x3e, 0x30, 0xa5, 0x95, 0xc4, 0xa, 0x23, 0x4e, 0x3c, 0x12, 0x3d, 0xef, 0x7b, 0x3d, 0xb1, 0x83, 0x61, 0xfd, 0x8f, 0x43, 0xf8, 0x66}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"components/footer.html": componentsFooterHtml,
	"layouts/default.html":   layoutsDefaultHtml,
	"pages/index.html":       pagesIndexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"components": &bintree{nil, map[string]*bintree{
		"footer.html": &bintree{componentsFooterHtml, map[string]*bintree{}},
	}},
	"layouts": &bintree{nil, map[string]*bintree{
		"default.html": &bintree{layoutsDefaultHtml, map[string]*bintree{}},
	}},
	"pages": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{pagesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
